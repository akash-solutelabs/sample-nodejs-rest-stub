name: Deploy to AWS ECS (Master)

on:
  push:
    branches:
      - ci-cd-test
 
jobs:
  build:
    runs-on: ubuntu-latest

    steps:
   
    - name: Checkout
      uses: actions/checkout@v2
      
#We used IAM user ECR-ECS-Test-access Access and Secret Key
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: 292003219542.dkr.ecr.ap-south-1.amazonaws.com
        ECR_REPOSITORY: mw-test-repo
        IMAGE_TAG: ${{ github.sha }}
        REGION: ap-south-1
        ECS_CLUSTER: middleware-test-cluster
        SERVICE_NAME: ecs-mw-service
        
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # cd api
        docker build -f Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
    - name: Fill in the new image ID in the Amazon ECS task definition for TPMLMWDEVAPI container
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definitions/prod.json
        container-name: nginx-contaner
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ecs-mw-service
        cluster: middleware-test-cluster
        #wait-for-service-stability: true
        #wait-for-minutes: 10 minutes
         # Deploy the ECS task definition with force-new-deployment
         
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ecs-mw-service
        cluster: middleware-test-cluster
        force-new-deployment: true  # This forces ECS to replace the running tasks
